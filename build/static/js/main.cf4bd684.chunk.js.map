{"version":3,"sources":["actions/listsAction.js","actions/cardsAction.js","actions/index.js","reducers/ListReducer.js","reducers/index.js","store/index.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","ListReducer","state","action","newList","newCard","newState","map","list","splice","find","card","listStart","listEnd","combineReducers","lists","store","createStore","rootReducer","CardContainer","styled","div","TrelloCard","index","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","TrelloActionButton","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleaddList","dispatch","props","handleaddCard","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","overflow","minHeight","minWidth","padding","autoFocus","onBlur","onChange","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","connect","ListContainer","TrelloList","droppableId","droppableProps","key","App","onDragEnd","result","destination","source","className","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf4bd684.chunk.js","sourcesContent":["import  { CONSTANTS } from \"../actions\"; \r\n\r\nexport const addList = (title) => {\r\n    return  {\r\n        type : CONSTANTS.ADD_LIST,\r\n        payload : title\r\n    };  \r\n};\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n\r\n) => {\r\n    return{\r\n        type : CONSTANTS.DRAG_HAPPENED,\r\n        payload : {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    }\r\n}","import  { CONSTANTS } from \"../actions\"; \r\n\r\nexport const addCard = (listID,text) => {\r\n    return  {\r\n        type : CONSTANTS.ADD_CARD,\r\n        payload : { text , listID }\r\n    };  \r\n};","export * from \"./listsAction\";\r\nexport * from \"./cardsAction\";\r\n\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD : \"ADD_CARD\",\r\n    ADD_LIST : \"ADD_LIST\",\r\n    DRAG_HAPPENED : \"DRAG_HAPPENED\"\r\n};\r\n","import {CONSTANTS } from \"../actions\";\r\n\r\nlet listID = 2\r\nlet cardID = 6\r\n\r\n//creating a List Reducer\r\nconst initialState = [\r\n    {\r\n        title: \"How to use Trello App\",\r\n        id: `list-${0}`,\r\n        cards:[\r\n            {\r\n                id: `card-${0}`,\r\n                text:\"Step 1: Create a list and give a name\"\r\n            },\r\n            \r\n            {\r\n                id: `card-${1}`,\r\n                text:\"Step 2: Create cards for your task\"\r\n            },\r\n\r\n            {\r\n                id : `card-${2}`,\r\n                text : \"Step 3 : Can Drag and Drop the lists and cards\"\r\n            }\r\n\r\n\r\n        ]\r\n    }\r\n\r\n\r\n    \r\n];\r\n\r\n\r\n\r\n\r\n\r\n//ListReducer Method\r\nconst ListReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST :\r\n            const newList = {\r\n                title : action.payload,\r\n                cards : [],\r\n                id : `list-${listID}`\r\n            };\r\n\r\n            listID += 1;\r\n            return [...state, newList];\r\n        \r\n        case CONSTANTS.ADD_CARD : {\r\n            const newCard = {\r\n                id : `card-${cardID}`,\r\n                text : action.payload.text\r\n            };\r\n            cardID += 1\r\n            \r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listID){\r\n                    return {\r\n                        ...list,\r\n                        cards : [...list.cards, newCard]\r\n                    }\r\n                }\r\n                else {\r\n                    return list\r\n                }\r\n            });\r\n\r\n            return newState;\r\n\r\n        }\r\n\r\n            case CONSTANTS.DRAG_HAPPENED :\r\n                const {\r\n                    droppableIdStart,\r\n                    droppableIdEnd,\r\n                    droppableIndexStart,\r\n                    droppableIndexEnd,\r\n                    draggableId,\r\n                    type\r\n                } = action.payload;\r\n                \r\n                const newState = [...state];\r\n\r\n                // dragging list around\r\n                if(type === \"list\") {\r\n                    const list = newState.splice(droppableIndexStart,1);\r\n                    newState.splice(droppableIndexEnd,0,...list);\r\n                    return newState;\r\n                }\r\n                \r\n                //in the Same List\r\n                if(droppableIdStart === droppableIdEnd ) {\r\n                    const list = state.find(list => droppableIdStart === list.id)\r\n                    const card = list.cards.splice(droppableIndexStart, 1)\r\n                    list.cards.splice(droppableIndexEnd, 0 , ...card)\r\n                }\r\n\r\n                // other list\r\n                if(droppableIdStart !== droppableIdEnd) {\r\n\r\n                    //find the list where drag happened\r\n                    const listStart = state.find(list => droppableIdStart === list.id)\r\n                    \r\n                    //pull out the cards from this list\r\n                    const card = listStart.cards.splice(droppableIndexStart,1);\r\n\r\n                    //find the list where drag ended\r\n                    const listEnd = state.find(list => droppableIdEnd === list.id);\r\n\r\n                    //put the card in the new list\r\n                    listEnd.cards.splice(droppableIndexEnd,0, ...card);\r\n                \r\n                }\r\n\r\n\r\n                return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default ListReducer;","import {combineReducers} from \"redux\";\r\nimport ListReducer from \"./ListReducer\"\r\n\r\n\r\nexport default combineReducers({\r\n    lists:ListReducer\r\n});\r\n","import {createStore} from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst store =createStore(rootReducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\n// Style for card\r\nconst CardContainer = styled.div `\r\n    margin-bottom : 8px;\r\n`;\r\n\r\n// TrelloCard Method\r\nconst TrelloCard=({ text, id, index }) =>{\r\n    return(\r\n        \r\n        <Draggable draggableId = {String (id) } index = {index}  >\r\n        {provided => (\r\n        <CardContainer  ref = {provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} >\r\n            <Card>\r\n            <CardContent>\r\n                <Typography gutterBottom>{text}</Typography>\r\n            </CardContent>\r\n            </Card>\r\n            </CardContainer>\r\n\r\n        )}\r\n        \r\n        </Draggable>\r\n\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default TrelloCard;","import React from \"react\"\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Textarea from \"react-textarea-autosize\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport {addList ,addCard } from \"../actions\";\r\n\r\n\r\nclass TrelloActionButton extends React.Component {\r\n\r\n    state = {\r\n        formOpen : false\r\n    }\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            formOpen : true\r\n        });\r\n    };\r\n\r\n    closeForm = (e) => {\r\n        this.setState({\r\n            formOpen : false\r\n        })\r\n    };\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            text : e.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    handleaddList = () => {\r\n        const { dispatch } = this.props;\r\n        const { text } = this.state;\r\n        if(text) {\r\n            this.setState ({\r\n                text : \"\"\r\n            });\r\n            dispatch(addList(text));\r\n        }\r\n\r\n        return;\r\n    };\r\n\r\n    handleaddCard = () => {\r\n        const {dispatch, listID} = this.props;\r\n        const { text } = this.state;\r\n\r\n        if(text) {\r\n            this.setState ({\r\n                text : \"\"\r\n            });\r\n            dispatch(addCard( listID , text))\r\n        }\r\n    }\r\n\r\n    //Creating Action Button to Add Lists and Cards\r\n     renderAddButton = () => {\r\n       const {list} = this.props;\r\n       \r\n       const buttonText = list ? \"Add another list\" : \"Add another Card\";\r\n       const buttonTextOpacity = list ? 1 : 0.5;\r\n       const buttonTextColor = list ? \"white\" : \"inherit\";\r\n       const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\r\n       \r\n       return (\r\n           <div \r\n           onClick = {this.openForm}\r\n           style = { { \r\n               ...styles.openFormButtonGroup,\r\n               opacity : buttonTextOpacity, \r\n               color : buttonTextColor, \r\n               backgroundColor : buttonTextBackground } } >\r\n               <Icon>add</Icon>\r\n               <p>{buttonText}</p>\r\n\r\n           </div>\r\n       )\r\n   };\r\n\r\n\r\n\r\n   renderForm = () => {\r\n\r\n        const { list } = this.props;\r\n        const placeholder = list ? \"Enter List Title...\"\r\n        : \"Enter a Title for New Card...\";\r\n\r\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\r\n\r\n       return <div>\r\n       <Card style ={{\r\n           overflow : \"visible\",\r\n           minHeight : 80,\r\n           minWidth : 272,\r\n           padding :  \"6px 8px 2px\"\r\n\r\n       }}>\r\n       <Textarea\r\n       placeholder = {placeholder}\r\n       autoFocus\r\n       onBlur =  {this.closeForm}\r\n       value = {this.state.text}\r\n       onChange = {this.handleInputChange}\r\n       style = {{\r\n           resize : \"none\",\r\n           width : \"100%\",\r\n           overflow :\"hidden\",\r\n           outline : \"none\",\r\n           border : \"none\"\r\n\r\n       }}\r\n       />\r\n       </Card>\r\n       <div style = {styles.formButtonGroup}>\r\n        <Button\r\n        onMouseDown = {list ? this.handleaddList : this.handleaddCard} \r\n       variant = \"contained\" \r\n       style ={{ color : \"white\" ,backgroundColor : \"#6666FF\"}}>\r\n       {buttonTitle} {\" \"}\r\n       </Button>\r\n       <Icon style = {{ marginLeft : 8, cursor : \"pointer\"}} >close</Icon>\r\n       </div>\r\n       </div>\r\n   }\r\n   \r\n   \r\n   \r\n   \r\n    render() {\r\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n    }\r\n}\r\n\r\n// Creating Style for Action Buttons\r\nconst styles = {\r\n    openFormButtonGroup : {\r\n        display : \"flex\",\r\n        alignItems : \"center\",\r\n        cursor : \"pointer\",\r\n        borderRadius : 10,\r\n        height : 36,\r\n        width : 272,\r\n        paddingLeft : 10\r\n    },\r\n    formButtonGroup : {\r\n        marginTop : 10,\r\n        display : \"flex\",\r\n        alignItems : \"center\"\r\n    }\r\n};\r\n\r\nexport default connect() (TrelloActionButton);","import React from \"react\";\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport { Droppable , Draggable} from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\n// style for listConatiner\r\nconst ListContainer = styled.div`\r\n        background-color: #C0C0C0;\r\n        border-radius:3px;\r\n        width:300px;\r\n        padding:8px;\r\n        margin-right:8px;\r\n        height : 100%;\r\n\r\n`;\r\n\r\n//Trello List Method\r\nconst TrelloList=({title, cards,listID , index}) => {\r\n    return(\r\n\r\n        <Draggable draggableId = {String (listID)} index = {index} >\r\n        {provided => (\r\n            <ListContainer {...provided.draggableProps} ref = {provided.innerRef} {...provided.dragHandleProps} > \r\n            <Droppable droppableId = { String(listID) }>\r\n        { provided => (\r\n         <div {...provided.droppableProps} ref = {provided.innerRef}>   \r\n        <h4>{title}</h4>\r\n        {cards.map(( card, index ) => (\r\n            <TrelloCard key={card.id} \r\n                        index = {index} \r\n                        text = {card.text} \r\n                        id = {card.id} />\r\n            ))}\r\n            {provided.placeholder}\r\n            <TrelloActionButton listID = {listID} />\r\n            \r\n            </div>\r\n\r\n        )}\r\n        \r\n        </Droppable>\r\n        </ListContainer>    \r\n        )}\r\n        </Draggable>\r\n        \r\n    );\r\n};\r\n\r\n\r\nexport default TrelloList;","import React,{ Component } from 'react';\nimport { connect } from \"react-redux\";\nimport TrelloList from \"./TrelloList\";\nimport TrelloActionButton from \"./TrelloActionButton\"; //for performing actions on button click\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"; // for drag and drop for cards and lists\nimport { sort } from \"../actions\"; // for sorting the list after drag and drop\nimport styled from \"styled-components\";\nimport \"./App.css\"\n\nconst ListContainer = styled.div `\n  display : flex;\n  flex-direction : row;\n\n\n`;\n\n\nclass App extends Component {\n\n  onDragEnd = (result) => {\n    //reordering logic\n    const {destination , source, draggableId, type} = result;\n\n    if(!destination) {\n        return;\n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n        )\n      );\n    };\n\n  render (){\n    const {lists} = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n      <div className=\"App\">\n       <h1>Trello Clone Application</h1>\n       <Droppable droppableId = \"all-lists\" direction = \"horizontal\" type = \"list\">\n       \n       { provided  =>  (\n        \n        <ListContainer { ...provided.droppableProps} ref= { provided.innerRef}>\n        {lists.map((list ,index) => (\n         <TrelloList listID = {list.id} key={list.id} title = {list.title} cards = {list.cards} index= {index} />\n           ))}\n        <TrelloActionButton list/>\n        </ListContainer>\n\n       )}\n       </Droppable>\n       \n       </div>\n       </DragDropContext>\n    );\n  }\n\n}\n\n\n\nconst mapStateToProps = state =>({\n  lists: state.lists\n\n});\n  \n\nexport default connect(mapStateToProps)(App) ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App/></Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}